class Solution:
    def singleNumber(self, nums: List[int]) -> List[int]:
        """
        在二进制表示中，如果两个数字在某一位上不同，那么这两个数字在这一位上的异或结果就是1。
        在这个问题中，我们知道有两个数字只出现了一次，而其他数字都出现了两次。
        所以，如果我们将所有数字进行异或操作，得到的结果就是这两个只出现一次的数字的异或结果。
        这个结果中的每一位1，都表示这两个只出现一次的数字在这一位上是不同的。

        然后，我们可以选择这个结果中的任意一位1，用它来将所有数字分为两部分。
        一部分的数字在这一位上是1，另一部分的数字在这一位上是0。这就是mask的作用。
        由于这两个只出现一次的数字在这一位上是不同的，所以它们一定会被分到不同的部分。
        而其他出现两次的数字，由于它们是成对出现的，所以它们一定会被分到同一部分。
        这样，我们就将问题分解为了两个更简单的问题：在每一部分中找到只出现一次的数字。

        最后，我们只需要对每一部分的数字进行异或操作，就可以得到只出现一次的数字。
        这是因为异或操作的性质：
        任何数字和0进行异或操作，结果都是它自己；
        任何数字和它自己进行异或操作，结果都是0。
        所以，对每一部分的数字进行异或操作，所有出现两次的数字都会被抵消，只剩下只出现一次的数字。
        """
        xor = 0
        for x in nums:
            xor ^= x

        mask = 1
        while xor & mask == 0:
            mask <<= 1

        a = b = 0
        for x in nums:
            if x & mask:
                a ^= x
            else:
                b ^= x

        return [a, b]
